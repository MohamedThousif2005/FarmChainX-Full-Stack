package com.farmchainx.backend.controller;

import com.farmchainx.backend.entity.User;
import com.farmchainx.backend.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:5173", "http://localhost:5174"})
public class AuthController {
    
    private final UserService userService;
    private final PasswordEncoder passwordEncoder;
    
    @Autowired
    public AuthController(UserService userService, PasswordEncoder passwordEncoder) {
        this.userService = userService;
        this.passwordEncoder = passwordEncoder;
    }
    
    @PostMapping("/register")
    public ResponseEntity<?> registerUser(@RequestBody User user) {
        try {
            System.out.println("Registration attempt for: " + user.getEmail());
            
            if (userService.emailExists(user.getEmail())) {
                Map<String, String> response = new HashMap<>();
                response.put("error", "Email already exists");
                System.out.println("Registration failed: Email already exists");
                return ResponseEntity.badRequest().body(response);
            }
            
            User newUser = new User();
            newUser.setFullName(user.getFullName());
            newUser.setEmail(user.getEmail());
            // Encode password before saving
            newUser.setPassword(passwordEncoder.encode(user.getPassword()));
            newUser.setRole(user.getRole());
            
            // AUTO-APPROVE ALL USERS FOR NOW (Remove this in production)
            newUser.setApproved(true);
            
            // Set optional fields
            if (user.getFarmName() != null) newUser.setFarmName(user.getFarmName());
            if (user.getCompanyName() != null) newUser.setCompanyName(user.getCompanyName());
            
            User createdUser = userService.createUser(newUser);
            
            Map<String, Object> response = new HashMap<>();
            response.put("message", "Registration successful! You can now login.");
            response.put("user", createdUser);
            
            System.out.println("Registration successful for: " + user.getEmail());
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            System.out.println("Registration error: " + e.getMessage());
            e.printStackTrace();
            
            Map<String, String> response = new HashMap<>();
            response.put("error", "Registration failed: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }
    
    @PostMapping("/login")
    public ResponseEntity<?> loginUser(@RequestBody LoginRequest loginRequest) {
        try {
            System.out.println("Login attempt for: " + loginRequest.getEmail());
            
            User user = userService.getUserByEmail(loginRequest.getEmail())
                    .orElseThrow(() -> {
                        System.out.println("User not found: " + loginRequest.getEmail());
                        return new RuntimeException("Invalid email or password");
                    });
            
            System.out.println("User found: " + user.getEmail() + ", Role: " + user.getRole() + ", Approved: " + user.getApproved());
            
            boolean passwordMatches = passwordEncoder.matches(loginRequest.getPassword(), user.getPassword());
            System.out.println("Password matches: " + passwordMatches);
            
            if (!passwordMatches) {
                Map<String, String> response = new HashMap<>();
                response.put("error", "Invalid email or password");
                System.out.println("Login failed: Password mismatch");
                return ResponseEntity.badRequest().body(response);
            }
            
            // REMOVED APPROVAL CHECK - Allow all users to login
            // if (!user.getApproved() && !"ADMIN".equals(user.getRole())) {
            //     Map<String, String> response = new HashMap<>();
            //     response.put("error", "Your account is pending admin approval. Please wait for approval.");
            //     response.put("code", "ACCOUNT_PENDING_APPROVAL");
            //     System.out.println("Login failed: Account not approved");
            //     return ResponseEntity.status(403).body(response);
            // }
            
            Map<String, Object> userResponse = new HashMap<>();
            userResponse.put("id", user.getId());
            userResponse.put("fullName", user.getFullName());
            userResponse.put("email", user.getEmail());
            userResponse.put("role", user.getRole());
            userResponse.put("approved", user.getApproved());
            userResponse.put("createdAt", user.getCreatedAt());
            userResponse.put("farmName", user.getFarmName());
            userResponse.put("companyName", user.getCompanyName());
            
            Map<String, Object> response = new HashMap<>();
            response.put("message", "Login successful");
            response.put("user", userResponse);
            response.put("role", user.getRole());
            response.put("status", "success");
            
            System.out.println("Login successful for: " + user.getEmail());
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            System.out.println("Login error: " + e.getMessage());
            e.printStackTrace();
            
            Map<String, String> response = new HashMap<>();
            response.put("error", "Login failed: " + e.getMessage());
            response.put("status", "error");
            return ResponseEntity.badRequest().body(response);
        }
    }
    
    @PostMapping("/create-admin")
    public ResponseEntity<?> createAdminUser() {
        try {
            if (userService.emailExists("admin@farmchainx.com")) {
                Map<String, String> response = new HashMap<>();
                response.put("message", "Admin user already exists");
                return ResponseEntity.ok(response);
            }
            
            User adminUser = new User();
            adminUser.setFullName("Admin User");
            adminUser.setEmail("admin@farmchainx.com");
            adminUser.setPassword(passwordEncoder.encode("admin123"));
            adminUser.setRole("ADMIN");
            adminUser.setApproved(true);
            
            User createdUser = userService.createUser(adminUser);
            
            Map<String, Object> response = new HashMap<>();
            response.put("message", "Admin user created successfully");
            response.put("user", createdUser);
            response.put("status", "success");
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            Map<String, String> response = new HashMap<>();
            response.put("error", "Failed to create admin: " + e.getMessage());
            response.put("status", "error");
            return ResponseEntity.badRequest().body(response);
        }
    }
    
    // Endpoint to auto-approve all existing users (for testing)
    @PostMapping("/approve-all-users")
    public ResponseEntity<?> approveAllUsers() {
        try {
            java.util.List<User> allUsers = userService.getAllUsers();
            int approvedCount = 0;
            
            for (User user : allUsers) {
                if (!user.getApproved()) {
                    user.setApproved(true);
                    userService.updateUser(user);
                    approvedCount++;
                }
            }
            
            Map<String, Object> response = new HashMap<>();
            response.put("message", "Approved " + approvedCount + " users");
            response.put("totalUsers", allUsers.size());
            response.put("approvedCount", approvedCount);
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            Map<String, String> response = new HashMap<>();
            response.put("error", "Failed to approve users: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }
    
    @GetMapping("/status")
    public ResponseEntity<?> authStatus() {
        Map<String, Object> response = new HashMap<>();
        response.put("status", "OK");
        response.put("service", "Auth Controller");
        response.put("timestamp", java.time.LocalDateTime.now().toString());
        response.put("message", "Auth service is running properly");
        return ResponseEntity.ok(response);
    }
    
    @GetMapping("/test-db")
    public ResponseEntity<?> testDatabase() {
        try {
            long userCount = userService.countUsers();
            Map<String, Object> response = new HashMap<>();
            response.put("status", "OK");
            response.put("database", "connected");
            response.put("totalUsers", userCount);
            response.put("message", "Database connection successful");
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("status", "ERROR");
            response.put("database", "disconnected");
            response.put("error", e.getMessage());
            response.put("message", "Database connection failed");
            return ResponseEntity.internalServerError().body(response);
        }
    }
    
    public static class LoginRequest {
        private String email;
        private String password;
        
        public String getEmail() { return email; }
        public void setEmail(String email) { this.email = email; }
        
        public String getPassword() { return password; }
        public void setPassword(String password) { this.password = password; }
    }
}