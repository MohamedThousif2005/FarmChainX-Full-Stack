package com.farmchainx.backend.controller;

import com.farmchainx.backend.entity.User;
import com.farmchainx.backend.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "*")
public class SimpleAdminController {

    @Autowired
    private UserRepository userRepository;

    // Test endpoint - this should always work
    @GetMapping("/test")
    public Map<String, Object> test() {
        Map<String, Object> response = new HashMap<>();
        response.put("status", "SUCCESS");
        response.put("message", "Backend is working!");
        response.put("timestamp", System.currentTimeMillis());
        return response;
    }

    // Get all users - SIMPLE version
    @GetMapping("/users")
    public Map<String, Object> getAllUsers() {
        try {
            System.out.println("=== GETTING ALL USERS ===");
            List<User> users = userRepository.findAll();
            
            Map<String, Object> response = new HashMap<>();
            response.put("status", "SUCCESS");
            response.put("count", users.size());
            response.put("users", users);
            response.put("timestamp", System.currentTimeMillis());
            
            // Log to console
            System.out.println("Found " + users.size() + " users:");
            for (User user : users) {
                System.out.println(" - " + user.getEmail() + " (" + user.getFullName() + ") - " + user.getRole());
            }
            
            return response;
            
        } catch (Exception e) {
            System.out.println("ERROR getting users: " + e.getMessage());
            e.printStackTrace();
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("status", "ERROR");
            errorResponse.put("message", "Failed to get users: " + e.getMessage());
            errorResponse.put("timestamp", System.currentTimeMillis());
            return errorResponse;
        }
    }

    // Get user statistics
    @GetMapping("/stats")
    public Map<String, Object> getStats() {
        try {
            long totalUsers = userRepository.count();
            long farmers = userRepository.countByRole("FARMER");
            long distributors = userRepository.countByRole("DISTRIBUTOR");
            long consumers = userRepository.countByRole("CONSUMER");
            long admins = userRepository.countByRole("ADMIN");
            
            Map<String, Object> response = new HashMap<>();
            response.put("status", "SUCCESS");
            response.put("totalUsers", totalUsers);
            response.put("pendingApprovals", 0); // All users are auto-approved
            response.put("approvedUsers", totalUsers);
            response.put("totalFarmers", farmers);
            response.put("totalDistributors", distributors);
            response.put("totalConsumers", consumers);
            response.put("totalAdmins", admins);
            response.put("timestamp", System.currentTimeMillis());
            
            System.out.println("Stats: Total=" + totalUsers + ", Farmers=" + farmers + 
                             ", Distributors=" + distributors + ", Consumers=" + consumers);
            
            return response;
            
        } catch (Exception e) {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("status", "ERROR");
            errorResponse.put("message", "Failed to get stats: " + e.getMessage());
            errorResponse.put("timestamp", System.currentTimeMillis());
            return errorResponse;
        }
    }

    // Health check endpoint
    @GetMapping("/health")
    public Map<String, Object> health() {
        Map<String, Object> response = new HashMap<>();
        response.put("status", "OK");
        response.put("service", "FarmChainX Backend");
        response.put("timestamp", System.currentTimeMillis());
        response.put("database", "Connected");
        return response;
    }
}