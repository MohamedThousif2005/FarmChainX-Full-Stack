package com.farmchainx.backend.service;

import com.farmchainx.backend.dto.ProductDTO;
import com.farmchainx.backend.entity.Product;
import com.farmchainx.backend.entity.User;
import com.farmchainx.backend.repository.ProductRepository;
import com.farmchainx.backend.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Transactional
public class ProductService {

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private UserRepository userRepository;

    public Product addProduct(ProductDTO productDTO, Long distributorId) {
        try {
            System.out.println("üîÑ Adding product for distributor: " + distributorId);
            
            // Find distributor
            Optional<User> distributorOpt = userRepository.findById(distributorId);
            if (distributorOpt.isEmpty()) {
                throw new RuntimeException("Distributor not found with ID: " + distributorId);
            }

            User distributor = distributorOpt.get();
            if (!"DISTRIBUTOR".equals(distributor.getRole())) {
                throw new RuntimeException("User is not a distributor");
            }

            // Create product entity
            Product product = new Product();
            product.setName(productDTO.getName());
            product.setDescription(productDTO.getDescription());
            product.setCategory(productDTO.getCategory());
            product.setPrice(productDTO.getPrice());
            product.setQuantity(productDTO.getQuantity());
            product.setUnit(productDTO.getUnit());
            product.setImageUrl(productDTO.getImageUrl());
            product.setDistributor(distributor);
            product.setIsAvailable(productDTO.getIsAvailable() != null ? productDTO.getIsAvailable() : true);

            Product savedProduct = productRepository.save(product);
            System.out.println("‚úÖ Product added successfully with ID: " + savedProduct.getId());
            
            return savedProduct;

        } catch (Exception e) {
            System.err.println("‚ùå Error adding product: " + e.getMessage());
            throw new RuntimeException("Failed to add product: " + e.getMessage());
        }
    }

    public List<ProductDTO> getProductsByDistributor(Long distributorId) {
        try {
            System.out.println("üîÑ Fetching products for distributor: " + distributorId);
            
            List<Product> products = productRepository.findByDistributorId(distributorId);
            System.out.println("‚úÖ Found " + products.size() + " products for distributor: " + distributorId);
            
            return products.stream()
                    .map(this::convertToDTO)
                    .collect(Collectors.toList());
                    
        } catch (Exception e) {
            System.err.println("‚ùå Error fetching products: " + e.getMessage());
            throw new RuntimeException("Failed to fetch products: " + e.getMessage());
        }
    }

    public Product updateProduct(Long productId, ProductDTO productDTO) {
        try {
            System.out.println("üîÑ Updating product: " + productId);
            
            Optional<Product> productOpt = productRepository.findById(productId);
            if (productOpt.isEmpty()) {
                throw new RuntimeException("Product not found with ID: " + productId);
            }

            Product product = productOpt.get();
            product.setName(productDTO.getName());
            product.setDescription(productDTO.getDescription());
            product.setCategory(productDTO.getCategory());
            product.setPrice(productDTO.getPrice());
            product.setQuantity(productDTO.getQuantity());
            product.setUnit(productDTO.getUnit());
            product.setIsAvailable(productDTO.getIsAvailable());
            
            if (productDTO.getImageUrl() != null) {
                product.setImageUrl(productDTO.getImageUrl());
            }
            
            product.setUpdatedAt(LocalDateTime.now());

            Product updatedProduct = productRepository.save(product);
            System.out.println("‚úÖ Product updated successfully: " + productId);
            
            return updatedProduct;

        } catch (Exception e) {
            System.err.println("‚ùå Error updating product: " + e.getMessage());
            throw new RuntimeException("Failed to update product: " + e.getMessage());
        }
    }

    public String deleteProduct(Long productId) {
        try {
            System.out.println("üîÑ Deleting product: " + productId);
            
            if (!productRepository.existsById(productId)) {
                throw new RuntimeException("Product not found with ID: " + productId);
            }

            // Check if product has order items before deleting
            boolean hasOrderItems = productRepository.hasOrderItems(productId);
            if (hasOrderItems) {
                throw new RuntimeException("Cannot delete product that has order items");
            }

            productRepository.deleteById(productId);
            System.out.println("‚úÖ Product deleted successfully: " + productId);
            
            return "Product deleted successfully";

        } catch (Exception e) {
            System.err.println("‚ùå Error deleting product: " + e.getMessage());
            throw new RuntimeException("Failed to delete product: " + e.getMessage());
        }
    }

    public ProductDTO getProductById(Long productId) {
        try {
            System.out.println("üîÑ Fetching product: " + productId);
            
            Optional<Product> productOpt = productRepository.findById(productId);
            if (productOpt.isEmpty()) {
                throw new RuntimeException("Product not found with ID: " + productId);
            }

            ProductDTO productDTO = convertToDTO(productOpt.get());
            System.out.println("‚úÖ Product fetched successfully: " + productId);
            
            return productDTO;

        } catch (Exception e) {
            System.err.println("‚ùå Error fetching product: " + e.getMessage());
            throw new RuntimeException("Failed to get product: " + e.getMessage());
        }
    }

    private ProductDTO convertToDTO(Product product) {
        ProductDTO dto = new ProductDTO();
        dto.setId(product.getId());
        dto.setName(product.getName());
        dto.setDescription(product.getDescription());
        dto.setCategory(product.getCategory());
        dto.setPrice(product.getPrice());
        dto.setQuantity(product.getQuantity());
        dto.setUnit(product.getUnit());
        dto.setImageUrl(product.getImageUrl());
        dto.setIsAvailable(product.getIsAvailable());
        dto.setDistributorId(product.getDistributor().getId());
        dto.setDistributorName(product.getDistributor().getFullName());
        dto.setCreatedAt(product.getCreatedAt());
        dto.setUpdatedAt(product.getUpdatedAt());
        return dto;
    }

    // Get all available products (for consumers)
    public List<ProductDTO> getAllAvailableProducts() {
        try {
            System.out.println("üîÑ Fetching all available products");
            
            List<Product> products = productRepository.findByIsAvailableTrue();
            System.out.println("‚úÖ Found " + products.size() + " available products");
            
            return products.stream()
                    .map(this::convertToDTO)
                    .collect(Collectors.toList());
                    
        } catch (Exception e) {
            System.err.println("‚ùå Error fetching available products: " + e.getMessage());
            throw new RuntimeException("Failed to fetch available products: " + e.getMessage());
        }
    }

    // Get products by category
    public List<ProductDTO> getProductsByCategory(String category) {
        try {
            System.out.println("üîÑ Fetching products by category: " + category);
            
            List<Product> allProducts = productRepository.findByIsAvailableTrue();
            List<Product> filteredProducts = allProducts.stream()
                    .filter(product -> category.equalsIgnoreCase(product.getCategory()))
                    .collect(Collectors.toList());
            
            System.out.println("‚úÖ Found " + filteredProducts.size() + " products in category: " + category);
            
            return filteredProducts.stream()
                    .map(this::convertToDTO)
                    .collect(Collectors.toList());
                    
        } catch (Exception e) {
            System.err.println("‚ùå Error fetching products by category: " + e.getMessage());
            throw new RuntimeException("Failed to fetch products by category: " + e.getMessage());
        }
    }
}