// AdminController.java
package com.farmchainx.backend.controller;

import com.farmchainx.backend.entity.User;
import com.farmchainx.backend.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/admin")
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:5173", "http://localhost:5174"})
public class AdminController {
    
    private static final Logger logger = LoggerFactory.getLogger(AdminController.class);
    
    @Autowired
    private UserService userService;
    
    @GetMapping("/pending-approvals")
    public ResponseEntity<?> getPendingApprovals() {
        try {
            logger.info("üìã Fetching pending approvals");
            List<User> pendingUsers = userService.getPendingApprovals();
            logger.info("‚úÖ Found {} pending users", pendingUsers.size());
            
            return ResponseEntity.ok(pendingUsers);
        } catch (Exception e) {
            logger.error("‚ùå Error fetching pending approvals: {}", e.getMessage());
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("error", "Failed to fetch pending approvals");
            errorResponse.put("message", e.getMessage());
            errorResponse.put("status", "error");
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }
    
    @PostMapping("/approve-user/{userId}")
    public ResponseEntity<?> approveUser(@PathVariable Long userId) {
        try {
            logger.info("‚úÖ Approving user with ID: {}", userId);
            User approvedUser = userService.approveUser(userId);
            
            Map<String, Object> response = new HashMap<>();
            response.put("message", "User approved successfully");
            response.put("user", approvedUser);
            response.put("status", "success");
            
            logger.info("‚úÖ User {} approved successfully", approvedUser.getEmail());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            logger.error("‚ùå Error approving user {}: {}", userId, e.getMessage());
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("error", e.getMessage());
            errorResponse.put("status", "error");
            return ResponseEntity.badRequest().body(errorResponse);
        }
    }
    
    @DeleteMapping("/reject-user/{userId}")
    public ResponseEntity<?> rejectUser(@PathVariable Long userId) {
        try {
            logger.info("‚ùå Rejecting user with ID: {}", userId);
            userService.rejectUser(userId);
            
            Map<String, String> response = new HashMap<>();
            response.put("message", "User rejected successfully");
            response.put("status", "success");
            
            logger.info("‚úÖ User {} rejected successfully", userId);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            logger.error("‚ùå Error rejecting user {}: {}", userId, e.getMessage());
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("error", e.getMessage());
            errorResponse.put("status", "error");
            return ResponseEntity.badRequest().body(errorResponse);
        }
    }
    
    @GetMapping("/user-stats")
    public ResponseEntity<?> getUserStats() {
        try {
            logger.info("üìä Fetching user statistics");
            Map<String, Long> stats = userService.getUserStats();
            logger.info("‚úÖ User stats retrieved: {}", stats);
            
            return ResponseEntity.ok(stats);
        } catch (Exception e) {
            logger.error("‚ùå Error fetching user stats: {}", e.getMessage());
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("error", "Failed to fetch stats");
            errorResponse.put("message", e.getMessage());
            errorResponse.put("status", "error");
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }
    
    @GetMapping("/all-users")
    public ResponseEntity<?> getAllUsers() {
        try {
            logger.info("üë• Fetching all users");
            List<User> users = userService.getAllUsers();
            logger.info("‚úÖ Found {} total users", users.size());
            
            return ResponseEntity.ok(users);
        } catch (Exception e) {
            logger.error("‚ùå Error fetching all users: {}", e.getMessage());
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("error", "Failed to fetch users");
            errorResponse.put("message", e.getMessage());
            errorResponse.put("status", "error");
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }
    
    @GetMapping("/test")
    public ResponseEntity<Map<String, String>> testAdmin() {
        Map<String, String> response = new HashMap<>();
        response.put("status", "OK");
        response.put("message", "Admin controller is working");
        response.put("timestamp", java.time.LocalDateTime.now().toString());
        logger.info("‚úÖ Admin test endpoint called");
        return ResponseEntity.ok(response);
    }
    
    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> healthCheck() {
        Map<String, Object> response = new HashMap<>();
        response.put("status", "OK");
        response.put("service", "Admin Controller");
        response.put("timestamp", java.time.LocalDateTime.now().toString());
        
        try {
            long totalUsers = userService.countUsers();
            long pendingUsers = userService.countPendingUsers();
            long approvedUsers = userService.countApprovedUsers();
            
            response.put("totalUsers", totalUsers);
            response.put("pendingUsers", pendingUsers);
            response.put("approvedUsers", approvedUsers);
            response.put("database", "connected");
            
            logger.info("‚úÖ Health check successful - Total users: {}", totalUsers);
        } catch (Exception e) {
            response.put("database", "error");
            response.put("error", e.getMessage());
            logger.error("‚ùå Database connection error: {}", e.getMessage());
        }
        
        return ResponseEntity.ok(response);
    }
    
    // Emergency endpoint to get raw user data
    @GetMapping("/debug-users")
    public ResponseEntity<?> debugUsers() {
        try {
            List<User> users = userService.getAllUsers();
            List<Map<String, Object>> debugData = users.stream()
                .map(user -> {
                    Map<String, Object> userMap = new HashMap<>();
                    userMap.put("id", user.getId());
                    userMap.put("email", user.getEmail());
                    userMap.put("fullName", user.getFullName());
                    userMap.put("role", user.getRole());
                    userMap.put("approved", user.getApproved());
                    userMap.put("isApproved", user.getIsApproved());
                    userMap.put("createdAt", user.getCreatedAt());
                    return userMap;
                })
                .toList();
            
            Map<String, Object> response = new HashMap<>();
            response.put("status", "success");
            response.put("count", users.size());
            response.put("users", debugData);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("status", "error");
            errorResponse.put("error", e.getMessage());
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }
}