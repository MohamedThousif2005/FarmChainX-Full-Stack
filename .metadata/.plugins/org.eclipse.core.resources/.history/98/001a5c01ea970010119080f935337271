package com.farmchainx.backend.repository;

import com.farmchainx.backend.entity.Crop;
import com.farmchainx.backend.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Repository
public interface CropRepository extends JpaRepository<Crop, Long> {
    
    List<Crop> findByUser(User user);
    
    List<Crop> findByUserId(Long userId);
    
    List<Crop> findByUserIdAndStatus(Long userId, String status);
    
    Optional<Crop> findByIdAndUserId(Long id, Long userId);
    
    long countByUser(User user);
    
    long countByUserAndStatus(User user, String status);
    
    @Query("SELECT c FROM Crop c WHERE c.user.id = :userId ORDER BY c.createdAt DESC")
    List<Crop> findRecentCropsByUserId(@Param("userId") Long userId);
    
    // Fixed query for upcoming harvests
    @Query("SELECT c FROM Crop c WHERE c.user.id = :userId AND c.approxHarvest BETWEEN CURRENT_DATE AND FUNCTION('DATEADD', 'DAY', 7, CURRENT_DATE)")
    List<Crop> findUpcomingHarvests(@Param("userId") Long userId);
    
    // Alternative simpler query if the above doesn't work
    // @Query("SELECT c FROM Crop c WHERE c.user.id = :userId AND c.approxHarvest >= CURRENT_DATE AND c.approxHarvest <= CURRENT_DATE + 7")
    // List<Crop> findUpcomingHarvests(@Param("userId") Long userId);
    
    @Query("SELECT COUNT(c) FROM Crop c WHERE c.user.id = :userId AND c.status = 'Active'")
    long countActiveCropsByUserId(@Param("userId") Long userId);
    
    @Query("SELECT COUNT(c) FROM Crop c WHERE c.user.id = :userId AND c.status = 'Harvested'")
    long countHarvestedCropsByUserId(@Param("userId") Long userId);
    
    // Additional useful queries
    @Query("SELECT c FROM Crop c WHERE c.user.id = :userId AND c.status = 'Active' AND c.approxHarvest IS NOT NULL AND c.approxHarvest <= CURRENT_DATE")
    List<Crop> findOverdueHarvests(@Param("userId") Long userId);
}