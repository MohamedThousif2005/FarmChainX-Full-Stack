package com.farmchainx.backend.controller;

import com.farmchainx.backend.entity.User;
import com.farmchainx.backend.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/debug")
@CrossOrigin(origins = "*")
public class DebugController {

    @Autowired
    private UserRepository userRepository;

    // Simple test endpoint that always works
    @GetMapping("/test")
    public Map<String, Object> test() {
        Map<String, Object> response = new HashMap<>();
        response.put("status", "SUCCESS");
        response.put("message", "Debug endpoint is working!");
        response.put("timestamp", System.currentTimeMillis());
        response.put("database", "Connected");
        return response;
    }

    // Get users in the simplest possible way
    @GetMapping("/users-simple")
    public Map<String, Object> getUsersSimple() {
        try {
            List<User> users = userRepository.findAll();
            
            Map<String, Object> response = new HashMap<>();
            response.put("status", "SUCCESS");
            response.put("count", users.size());
            response.put("users", users);
            response.put("timestamp", System.currentTimeMillis());
            
            // Log to console
            System.out.println("=== DEBUG: Found " + users.size() + " users ===");
            for (User user : users) {
                System.out.println("User: " + user.getEmail() + " - " + user.getFullName() + " - " + user.getRole());
            }
            
            return response;
        } catch (Exception e) {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("status", "ERROR");
            errorResponse.put("message", "Failed to get users: " + e.getMessage());
            errorResponse.put("timestamp", System.currentTimeMillis());
            return errorResponse;
        }
    }

    // Check if database has any users
    @GetMapping("/check-database")
    public Map<String, Object> checkDatabase() {
        try {
            long userCount = userRepository.count();
            List<User> allUsers = userRepository.findAll();
            
            Map<String, Object> response = new HashMap<>();
            response.put("status", "SUCCESS");
            response.put("userCount", userCount);
            response.put("hasUsers", userCount > 0);
            response.put("timestamp", System.currentTimeMillis());
            
            System.out.println("=== DATABASE CHECK ===");
            System.out.println("Total users: " + userCount);
            System.out.println("Has users: " + (userCount > 0));
            
            return response;
        } catch (Exception e) {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("status", "ERROR");
            errorResponse.put("message", "Database check failed: " + e.getMessage());
            errorResponse.put("timestamp", System.currentTimeMillis());
            return errorResponse;
        }
    }
}