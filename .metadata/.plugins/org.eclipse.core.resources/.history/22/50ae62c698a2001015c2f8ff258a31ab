import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './AdminDashboard.css';

function AdminDashboard() {
  const [allUsers, setAllUsers] = useState([]);
  const [stats, setStats] = useState({
    totalUsers: 0,
    pendingApprovals: 0,
    approvedUsers: 0,
    totalFarmers: 0,
    totalDistributors: 0,
    totalConsumers: 0,
    totalAdmins: 0
  });
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState('');
  const [activeTab, setActiveTab] = useState('all');
  const [backendStatus, setBackendStatus] = useState('checking');
  const navigate = useNavigate();

  const API_BASE_URL = 'http://localhost:8090';

  const getUserData = () => {
    try {
      const userData = localStorage.getItem('user');
      if (userData) {
        return JSON.parse(userData);
      }
    } catch (error) {
      console.error('Error parsing user data:', error);
    }
    return null;
  };

  // Ultra simple fetch with timeout
  const simpleFetch = async (url) => {
    console.log(`🔄 FETCHING: ${url}`);
    
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);
      
      const response = await fetch(url, { signal: controller.signal });
      clearTimeout(timeoutId);
      
      console.log(`📨 RESPONSE STATUS: ${response.status}`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const data = await response.json();
      console.log(`✅ SUCCESS:`, data);
      return data;
      
    } catch (error) {
      console.error(`❌ FAILED: ${error.message}`);
      throw error;
    }
  };

  useEffect(() => {
    checkBackendAndLoadData();
  }, []);

  const checkBackendAndLoadData = async () => {
    setLoading(true);
    setBackendStatus('checking');
    
    try {
      console.log('🚀 STEP 1: Testing basic connectivity...');
      
      // Test the simplest endpoint first
      const testResult = await simpleFetch(`${API_BASE_URL}/api/test`);
      
      if (testResult.status === 'SUCCESS') {
        console.log('✅ Backend is reachable!');
        setBackendStatus('online');
        
        // Now try to load real data
        await loadRealData();
      } else {
        throw new Error('Backend returned error status');
      }
      
    } catch (error) {
      console.error('❌ Backend connection failed:', error);
      setBackendStatus('offline');
      setMessage('Cannot connect to backend server. Using demo data.');
      loadDemoData();
    }
  };

  const loadRealData = async () => {
    try {
      console.log('📊 STEP 2: Loading real data...');
      
      // Try to load users
      const usersResponse = await simpleFetch(`${API_BASE_URL}/api/users`);
      
      if (usersResponse.status === 'SUCCESS' && usersResponse.users) {
        console.log(`✅ Loaded ${usersResponse.users.length} real users!`);
        processRealUsers(usersResponse.users);
        
        // Try to load stats
        try {
          const statsResponse = await simpleFetch(`${API_BASE_URL}/api/stats`);
          if (statsResponse.status === 'SUCCESS') {
            setStats({
              totalUsers: statsResponse.totalUsers || 0,
              pendingApprovals: statsResponse.pendingApprovals || 0,
              approvedUsers: statsResponse.approvedUsers || 0,
              totalFarmers: statsResponse.totalFarmers || 0,
              totalDistributors: statsResponse.totalDistributors || 0,
              totalConsumers: statsResponse.totalConsumers || 0,
              totalAdmins: statsResponse.totalAdmins || 0
            });
          }
        } catch (statsError) {
          console.log('⚠️ Could not load stats, calculating from users');
          calculateStatsFromUsers(usersResponse.users);
        }
        
        setMessage(`✅ Successfully loaded ${usersResponse.users.length} real users from database!`);
        
      } else {
        throw new Error('No users data received');
      }
      
    } catch (error) {
      console.error('❌ Failed to load real data:', error);
      setMessage('Could not load real user data. Using demo data.');
      loadDemoData();
    } finally {
      setLoading(false);
    }
  };

  const processRealUsers = (users) => {
    const formattedUsers = users.map(user => ({
      id: user.id,
      fullName: user.fullName || 'Unknown Name',
      email: user.email || 'No email',
      role: user.role || 'UNKNOWN',
      approved: user.approved !== false,
      phone: user.phone || 'Not provided',
      address: user.address || 'Not provided',
      createdAt: user.createdAt || new Date().toISOString()
    }));
    
    setAllUsers(formattedUsers);
  };

  const calculateStatsFromUsers = (users) => {
    const newStats = {
      totalUsers: users.length,
      pendingApprovals: users.filter(u => !u.approved).length,
      approvedUsers: users.filter(u => u.approved).length,
      totalFarmers: users.filter(u => u.role === 'FARMER').length,
      totalDistributors: users.filter(u => u.role === 'DISTRIBUTOR').length,
      totalConsumers: users.filter(u => u.role === 'CONSUMER').length,
      totalAdmins: users.filter(u => u.role === 'ADMIN').length
    };
    setStats(newStats);
  };

  const loadDemoData = () => {
    console.log('🔄 Loading demonstration data...');
    
    const user = getUserData();
    
    // Create realistic demo data
    const demoUsers = [
      {
        id: 1,
        fullName: user?.fullName || 'Admin User',
        email: user?.email || 'admin@farmchainx.com',
        role: 'ADMIN',
        approved: true,
        phone: '+1 234-567-8900',
        address: 'Admin Headquarters',
        createdAt: new Date().toISOString()
      },
      {
        id: 2,
        fullName: 'John Farmer',
        email: 'john.farmer@example.com',
        role: 'FARMER',
        approved: true,
        phone: '+1 555-0101',
        address: '123 Farm Road, Countryside',
        createdAt: new Date(Date.now() - 86400000).toISOString()
      },
      {
        id: 3,
        fullName: 'Sarah Distributor',
        email: 'sarah.dist@example.com',
        role: 'DISTRIBUTOR',
        approved: false,
        phone: '+1 555-0102',
        address: '456 Distribution Ave, City',
        createdAt: new Date(Date.now() - 172800000).toISOString()
      },
      {
        id: 4,
        fullName: 'Mike Consumer',
        email: 'mike.consumer@example.com',
        role: 'CONSUMER',
        approved: true,
        phone: '+1 555-0103',
        address: '789 Market Street, Town',
        createdAt: new Date(Date.now() - 259200000).toISOString()
      },
      {
        id: 5,
        fullName: 'Emma Grower',
        email: 'emma.grower@example.com',
        role: 'FARMER',
        approved: true,
        phone: '+1 555-0104',
        address: '321 Orchard Lane, Village',
        createdAt: new Date(Date.now() - 345600000).toISOString()
      }
    ];
    
    setAllUsers(demoUsers);
    calculateStatsFromUsers(demoUsers);
    setLoading(false);
  };

  const handleApprove = (userId, userName) => {
    setMessage(`✅ ${userName} approved successfully!`);
    setAllUsers(prev => prev.map(user => 
      user.id === userId ? { ...user, approved: true } : user
    ));
  };

  const handleReject = (userId, userName) => {
    if (!window.confirm(`Are you sure you want to reject ${userName}?`)) return;
    
    setMessage(`✅ ${userName} rejected successfully!`);
    setAllUsers(prev => prev.filter(user => user.id !== userId));
  };

  const handleLogout = () => {
    localStorage.removeItem('user');
    localStorage.removeItem('token');
    navigate('/login');
  };

  const handleRefresh = () => {
    setLoading(true);
    setMessage('');
    checkBackendAndLoadData();
  };

  const getStatusText = (user) => {
    return user.approved ? '✅ Approved' : '⏳ Pending';
  };

  const getStatusClass = (user) => {
    return user.approved ? 'approved' : 'pending';
  };

  const filteredUsers = activeTab === 'all' 
    ? allUsers 
    : allUsers.filter(user => user.role === activeTab.toUpperCase());

  if (loading) {
    return (
      <div className="admin-dashboard">
        <div className="loading">
          <div className="spinner"></div>
          <p>Loading admin dashboard...</p>
          <p>Status: <strong>{backendStatus}</strong></p>
          <div style={{marginTop: '20px', padding: '10px', background: '#f5f5f5', borderRadius: '5px'}}>
            <p style={{margin: 0, fontSize: '14px'}}>
              <strong>Testing endpoints:</strong><br/>
              • /api/test<br/>
              • /api/users<br/>
              • /api/stats
            </p>
          </div>
          <button className="retry-btn" onClick={handleRefresh} style={{marginTop: '20px'}}>
            🔄 Retry Connection
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-dashboard">
      <div className="admin-header">
        <div className="admin-header-content">
          <div>
            <h1>👨‍💼 Admin Dashboard</h1>
            <p>Manage users and system settings</p>
            <div className="connection-status">
              <span className={`status-badge ${backendStatus}`}>
                {backendStatus === 'online' ? '✅ Live Data' : 
                 backendStatus === 'checking' ? '🔄 Checking' :
                 backendStatus === 'offline' ? '❌ Demo Data' : '❌ Error'}
              </span>
              <small>Users: {allUsers.length} | {new Date().toLocaleTimeString()}</small>
            </div>
          </div>
          <div className="header-controls">
            <button className="refresh-btn" onClick={handleRefresh}>🔄 Refresh</button>
            <button className="logout-btn" onClick={handleLogout}>Logout</button>
          </div>
        </div>
      </div>

      {message && (
        <div className={`message ${message.includes('✅') ? 'success' : 'error'}`}>
          <span>{message}</span>
          <button onClick={() => setMessage('')}>×</button>
        </div>
      )}

      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon">👥</div>
          <div className="stat-info">
            <h3>Total Users</h3>
            <p className="stat-number">{stats.totalUsers}</p>
            <small>{backendStatus === 'online' ? 'Live from DB' : 'Demo data'}</small>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">⏳</div>
          <div className="stat-info">
            <h3>Pending</h3>
            <p className="stat-number">{stats.pendingApprovals}</p>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">✅</div>
          <div className="stat-info">
            <h3>Approved</h3>
            <p className="stat-number">{stats.approvedUsers}</p>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">👨‍🌾</div>
          <div className="stat-info">
            <h3>Farmers</h3>
            <p className="stat-number">{stats.totalFarmers}</p>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">🚚</div>
          <div className="stat-info">
            <h3>Distributors</h3>
            <p className="stat-number">{stats.totalDistributors}</p>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">🛒</div>
          <div className="stat-info">
            <h3>Consumers</h3>
            <p className="stat-number">{stats.totalConsumers}</p>
          </div>
        </div>
      </div>

      <div className="tab-navigation">
        <button className={activeTab === 'all' ? 'active' : ''} onClick={() => setActiveTab('all')}>
          👥 All Users ({allUsers.length})
        </button>
        <button className={activeTab === 'farmer' ? 'active' : ''} onClick={() => setActiveTab('farmer')}>
          👨‍🌾 Farmers ({allUsers.filter(u => u.role === 'FARMER').length})
        </button>
        <button className={activeTab === 'distributor' ? 'active' : ''} onClick={() => setActiveTab('distributor')}>
          🚚 Distributors ({allUsers.filter(u => u.role === 'DISTRIBUTOR').length})
        </button>
        <button className={activeTab === 'consumer' ? 'active' : ''} onClick={() => setActiveTab('consumer')}>
          🛒 Consumers ({allUsers.filter(u => u.role === 'CONSUMER').length})
        </button>
      </div>

      <div className="tab-content">
        <h2>
          {activeTab === 'all' ? 'All System Users' :
           activeTab === 'farmer' ? 'Farmers' :
           activeTab === 'distributor' ? 'Distributors' : 'Consumers'}
          <small style={{fontSize: '0.9rem', color: '#666', marginLeft: '10px'}}>
            ({filteredUsers.length} users) {backendStatus !== 'online' && ' - DEMO DATA'}
          </small>
        </h2>

        {filteredUsers.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">👥</div>
            <h3>No users found</h3>
            <p>No users in the system yet.</p>
          </div>
        ) : (
          <div className="table-container">
            <table className="users-table">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Name</th>
                  <th>Email</th>
                  <th>Phone</th>
                  <th>Role</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredUsers.map(user => (
                  <tr key={user.id}>
                    <td style={{fontFamily: 'monospace', fontSize: '0.8rem'}}>#{user.id}</td>
                    <td>
                      <div className="user-info">
                        <div>
                          <div className="user-name">{user.fullName}</div>
                          {user.address && user.address !== 'Not provided' && (
                            <small style={{color: '#666', fontSize: '0.8rem'}}>
                              {user.address}
                            </small>
                          )}
                        </div>
                      </div>
                    </td>
                    <td>{user.email}</td>
                    <td>{user.phone}</td>
                    <td>
                      <span className={`role-badge ${user.role.toLowerCase()}`}>
                        {user.role}
                      </span>
                    </td>
                    <td>
                      <span className={`status ${getStatusClass(user)}`}>
                        {getStatusText(user)}
                      </span>
                    </td>
                    <td>
                      <div className="action-buttons">
                        {!user.approved && (
                          <button 
                            className="btn-sm btn-approve"
                            onClick={() => handleApprove(user.id, user.fullName)}
                            title="Approve User"
                          >
                            ✅ Approve
                          </button>
                        )}
                        <button 
                          className="btn-sm btn-reject"
                          onClick={() => handleReject(user.id, user.fullName)}
                          title="Reject User"
                          disabled={user.role === 'ADMIN'}
                        >
                          ❌ Reject
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Quick Test Section */}
      <div style={{background: '#e8f5e8', padding: '15px', borderRadius: '8px', marginTop: '20px', border: '1px solid #4caf50'}}>
        <h4 style={{margin: '0 0 10px 0', color: '#2e7d32'}}>🔧 Quick Connection Test</h4>
        <p style={{margin: '0 0 10px 0', fontSize: '14px'}}>
          Test these URLs in your browser to check backend connectivity:
        </p>
        <div style={{display: 'flex', gap: '10px', flexWrap: 'wrap'}}>
          <a href="http://localhost:8090/api/test" target="_blank" rel="noopener noreferrer" 
             style={{padding: '8px 12px', background: '#4caf50', color: 'white', borderRadius: '4px', textDecoration: 'none', fontSize: '14px'}}>
            Test /api/test
          </a>
          <a href="http://localhost:8090/api/users" target="_blank" rel="noopener noreferrer"
             style={{padding: '8px 12px', background: '#2196f3', color: 'white', borderRadius: '4px', textDecoration: 'none', fontSize: '14px'}}>
            Test /api/users
          </a>
          <a href="http://localhost:8090/api/stats" target="_blank" rel="noopener noreferrer"
             style={{padding: '8px 12px', background: '#ff9800', color: 'white', borderRadius: '4px', textDecoration: 'none', fontSize: '14px'}}>
            Test /api/stats
          </a>
        </div>
      </div>
    </div>
  );
}

export default AdminDashboard;