package com.farmchainx.backend.controller;

import com.farmchainx.backend.entity.User;
import com.farmchainx.backend.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "*")
public class UserController {

    @Autowired
    private UserRepository userRepository;

    @GetMapping("/test")
    public Map<String, Object> test() {
        Map<String, Object> response = new HashMap<>();
        response.put("status", "SUCCESS");
        response.put("message", "Backend is working!");
        response.put("timestamp", System.currentTimeMillis());
        return response;
    }

    @GetMapping("/users")
    public Map<String, Object> getAllUsers() {
        try {
            List<User> users = userRepository.findAll();
            
            Map<String, Object> response = new HashMap<>();
            response.put("status", "SUCCESS");
            response.put("count", users.size());
            response.put("users", users);
            response.put("timestamp", System.currentTimeMillis());
            return response;
            
        } catch (Exception e) {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("status", "ERROR");
            errorResponse.put("message", "Database error: " + e.getMessage());
            errorResponse.put("timestamp", System.currentTimeMillis());
            return errorResponse;
        }
    }

    @GetMapping("/health")
    public Map<String, Object> health() {
        Map<String, Object> response = new HashMap<>();
        response.put("status", "OK");
        response.put("service", "FarmChainX Backend");
        response.put("timestamp", System.currentTimeMillis());
        response.put("database", "Connected");
        return response;
    }

    @GetMapping("/stats")
    public Map<String, Object> getStats() {
        try {
            List<User> allUsers = userRepository.findAll();
            long totalUsers = allUsers.size();
            long farmers = allUsers.stream().filter(u -> "FARMER".equals(u.getRole())).count();
            long distributors = allUsers.stream().filter(u -> "DISTRIBUTOR".equals(u.getRole())).count();
            long consumers = allUsers.stream().filter(u -> "CONSUMER".equals(u.getRole())).count();
            long admins = allUsers.stream().filter(u -> "ADMIN".equals(u.getRole())).count();
            
            Map<String, Object> response = new HashMap<>();
            response.put("status", "SUCCESS");
            response.put("totalUsers", totalUsers);
            response.put("totalFarmers", farmers);
            response.put("totalDistributors", distributors);
            response.put("totalConsumers", consumers);
            response.put("totalAdmins", admins);
            response.put("timestamp", System.currentTimeMillis());
            
            return response;
            
        } catch (Exception e) {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("status", "ERROR");
            errorResponse.put("message", "Failed to get stats: " + e.getMessage());
            errorResponse.put("timestamp", System.currentTimeMillis());
            return errorResponse;
        }
    }
}