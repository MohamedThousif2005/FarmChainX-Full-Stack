package com.farmchainx.backend.service;

import com.farmchainx.backend.dto.OrderDTO;
import com.farmchainx.backend.dto.OrderItemDTO;
import com.farmchainx.backend.dto.OrderRequestDTO;
import com.farmchainx.backend.dto.OrderItemRequestDTO;
import com.farmchainx.backend.entity.*;
import com.farmchainx.backend.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@Transactional
public class OrderService {
    
    @Autowired
    private OrderRepository orderRepository;
    
    @Autowired
    private OrderItemRepository orderItemRepository;
    
    @Autowired
    private ProductRepository productRepository;
    
    @Autowired
    private UserRepository userRepository;
    
    public Order createOrder(OrderRequestDTO orderRequest, Long consumerId) {
        try {
            System.out.println("üõí Starting order creation for consumer: " + consumerId);
            System.out.println("üì¶ Order request: " + orderRequest);
            
            // Validate consumer exists
            User consumer = userRepository.findById(consumerId)
                    .orElseThrow(() -> {
                        String error = "Consumer not found with id: " + consumerId;
                        System.err.println("‚ùå " + error);
                        return new RuntimeException(error);
                    });
            
            // Create order entity
            Order order = new Order();
            order.setConsumer(consumer);
            order.setCustomerName(orderRequest.getCustomerName());
            order.setCustomerPhone(orderRequest.getCustomerPhone());
            order.setShippingAddress(orderRequest.getShippingAddress());
            order.setPaymentMethod(orderRequest.getPaymentMethod());
            order.setStatus("PENDING");
            order.setOrderDate(LocalDateTime.now());
            
            // Generate unique order number
            order.setOrderNumber(generateOrderNumber());
            
            double totalAmount = 0.0;
            Long distributorId = null;
            
            // First validate all products and quantities
            System.out.println("üîç Validating products and quantities...");
            for (OrderItemRequestDTO itemRequest : orderRequest.getItems()) {
                Product product = productRepository.findById(itemRequest.getProductId())
                        .orElseThrow(() -> {
                            String error = "Product not found: " + itemRequest.getProductId();
                            System.err.println("‚ùå " + error);
                            return new RuntimeException(error);
                        });
                
                // Set distributor from the first product
                if (distributorId == null) {
                    distributorId = product.getDistributorId();
                    User distributor = userRepository.findById(distributorId)
                            .orElseThrow(() -> new RuntimeException("Distributor not found: " + distributorId));
                    order.setDistributor(distributor);
                    System.out.println("‚úÖ Found distributor: " + distributor.getFullName());
                }
                
                // Verify all products are from the same distributor
                if (!product.getDistributorId().equals(distributorId)) {
                    throw new RuntimeException("All products must be from the same distributor");
                }
                
                System.out.println("üì¶ Product: " + product.getName() + 
                                 ", Requested: " + itemRequest.getQuantity() + 
                                 ", Available: " + product.getQuantity());
                
                if (product.getQuantity() < itemRequest.getQuantity()) {
                    String error = "Insufficient quantity for product: " + product.getName() + 
                                 ". Available: " + product.getQuantity() + ", Requested: " + itemRequest.getQuantity();
                    System.err.println("‚ùå " + error);
                    throw new RuntimeException(error);
                }
                
                if (!product.getIsAvailable()) {
                    String error = "Product not available: " + product.getName();
                    System.err.println("‚ùå " + error);
                    throw new RuntimeException(error);
                }
            }
            
            // Save the order first to get an ID
            System.out.println("üíæ Saving order...");
            Order savedOrder = orderRepository.save(order);
            System.out.println("‚úÖ Order saved with ID: " + savedOrder.getId());
            
            // Process order items and update product quantities
            for (OrderItemRequestDTO itemRequest : orderRequest.getItems()) {
                Product product = productRepository.findById(itemRequest.getProductId())
                        .orElseThrow(() -> new RuntimeException("Product not found during processing: " + itemRequest.getProductId()));
                
                // Update product quantity
                int newQuantity = product.getQuantity() - itemRequest.getQuantity();
                product.setQuantity(newQuantity);
                if (newQuantity == 0) {
                    product.setIsAvailable(false);
                }
                Product updatedProduct = productRepository.save(product);
                
                // Create order item
                OrderItem orderItem = new OrderItem();
                orderItem.setOrder(savedOrder);
                orderItem.setProduct(updatedProduct);
                orderItem.setQuantity(itemRequest.getQuantity());
                orderItem.setPrice(product.getPrice());
                orderItem.setSubtotal(product.getPrice() * itemRequest.getQuantity());
                
                totalAmount += orderItem.getSubtotal();
                orderItemRepository.save(orderItem);
                
                System.out.println("‚úÖ Order item added: " + product.getName() + " x " + itemRequest.getQuantity());
            }
            
            // Update order with total amount
            savedOrder.setTotalAmount(totalAmount);
            Order finalOrder = orderRepository.save(savedOrder);
            
            System.out.println("üéâ Order created successfully! Order ID: " + finalOrder.getId() + 
                             ", Total: " + totalAmount + ", Items: " + orderRequest.getItems().size());
            
            return finalOrder;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error creating order: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Failed to create order: " + e.getMessage());
        }
    }
    
    private String generateOrderNumber() {
        return "ORD-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
    }
    
    public List<OrderDTO> getOrdersByConsumer(Long consumerId) {
        try {
            User consumer = userRepository.findById(consumerId)
                    .orElseThrow(() -> new RuntimeException("Consumer not found: " + consumerId));
            
            List<OrderDTO> orders = orderRepository.findByConsumer(consumer).stream()
                    .map(this::convertToDTO)
                    .collect(Collectors.toList());
            
            System.out.println("‚úÖ Retrieved " + orders.size() + " orders for consumer: " + consumerId);
            return orders;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error fetching consumer orders: " + e.getMessage());
            throw new RuntimeException("Failed to fetch orders: " + e.getMessage());
        }
    }
    
    public List<OrderDTO> getOrdersByDistributor(Long distributorId) {
        try {
            User distributor = userRepository.findById(distributorId)
                    .orElseThrow(() -> new RuntimeException("Distributor not found: " + distributorId));
            
            List<OrderDTO> orders = orderRepository.findByDistributor(distributor).stream()
                    .map(this::convertToDTO)
                    .collect(Collectors.toList());
            
            System.out.println("‚úÖ Retrieved " + orders.size() + " orders for distributor: " + distributorId);
            return orders;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error fetching distributor orders: " + e.getMessage());
            throw new RuntimeException("Failed to fetch orders: " + e.getMessage());
        }
    }
    
    public Order updateOrderStatus(Long orderId, String status) {
        try {
            Order order = orderRepository.findById(orderId)
                    .orElseThrow(() -> new RuntimeException("Order not found: " + orderId));
            
            order.setStatus(status);
            Order updatedOrder = orderRepository.save(order);
            
            System.out.println("‚úÖ Order status updated: " + orderId + " -> " + status);
            return updatedOrder;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error updating order status: " + e.getMessage());
            throw new RuntimeException("Failed to update order status: " + e.getMessage());
        }
    }
    
    public OrderDTO getOrderById(Long orderId) {
        try {
            Order order = orderRepository.findById(orderId)
                    .orElseThrow(() -> new RuntimeException("Order not found: " + orderId));
            
            OrderDTO orderDTO = convertToDTO(order);
            System.out.println("‚úÖ Retrieved order: " + orderId);
            return orderDTO;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error fetching order: " + e.getMessage());
            throw new RuntimeException("Failed to fetch order: " + e.getMessage());
        }
    }
    
    private OrderDTO convertToDTO(Order order) {
        OrderDTO dto = new OrderDTO();
        dto.setId(order.getId());
        dto.setOrderNumber(order.getOrderNumber());
        dto.setConsumerId(order.getConsumer().getId());
        dto.setDistributorId(order.getDistributor().getId());
        dto.setConsumerName(order.getConsumer().getFullName());
        dto.setDistributorName(order.getDistributor().getFullName());
        dto.setTotalAmount(order.getTotalAmount());
        dto.setStatus(order.getStatus());
        dto.setShippingAddress(order.getShippingAddress());
        dto.setCustomerName(order.getCustomerName());
        dto.setCustomerPhone(order.getCustomerPhone());
        dto.setPaymentMethod(order.getPaymentMethod());
        dto.setOrderDate(order.getOrderDate());
        dto.setDeliveryDate(order.getDeliveryDate());
        
        // Convert order items
        List<OrderItemDTO> itemDTOs = orderItemRepository.findByOrder(order).stream()
                .map(this::convertItemToDTO)
                .collect(Collectors.toList());
        dto.setOrderItems(itemDTOs);
        
        return dto;
    }
    
    private OrderItemDTO convertItemToDTO(OrderItem item) {
        OrderItemDTO dto = new OrderItemDTO();
        dto.setProductId(item.getProduct().getId());
        dto.setProductName(item.getProduct().getName());
        dto.setQuantity(item.getQuantity());
        dto.setPrice(item.getPrice());
        dto.setSubtotal(item.getSubtotal());
        return dto;
    }
}