package com.farmchainx.backend.controller;

import com.farmchainx.backend.dto.OrderDTO;
import com.farmchainx.backend.dto.OrderRequestDTO;
import com.farmchainx.backend.entity.Order;
import com.farmchainx.backend.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/orders")
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:5173", "*"})
public class OrderController {
    
    @Autowired
    private OrderService orderService;
    
    @PostMapping("/consumer/{consumerId}")
    public ResponseEntity<?> createOrder(@RequestBody OrderRequestDTO orderRequest,
                                       @PathVariable Long consumerId) {
        try {
            System.out.println("üì¶ Received order request for consumer: " + consumerId);
            System.out.println("üõí Order details: " + orderRequest);
            
            Order order = orderService.createOrder(orderRequest, consumerId);
            
            System.out.println("‚úÖ Order created successfully: " + order.getId());
            return ResponseEntity.ok(order);
        } catch (Exception e) {
            System.err.println("‚ùå Error creating order: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }
    
    @GetMapping("/consumer/{consumerId}")
    public ResponseEntity<List<OrderDTO>> getConsumerOrders(@PathVariable Long consumerId) {
        System.out.println("üìã Fetching orders for consumer: " + consumerId);
        List<OrderDTO> orders = orderService.getOrdersByConsumer(consumerId);
        System.out.println("‚úÖ Found " + orders.size() + " orders for consumer: " + consumerId);
        return ResponseEntity.ok(orders);
    }
    
    @GetMapping("/distributor/{distributorId}")
    public ResponseEntity<List<OrderDTO>> getDistributorOrders(@PathVariable Long distributorId) {
        System.out.println("üìã Fetching orders for distributor: " + distributorId);
        List<OrderDTO> orders = orderService.getOrdersByDistributor(distributorId);
        System.out.println("‚úÖ Found " + orders.size() + " orders for distributor: " + distributorId);
        return ResponseEntity.ok(orders);
    }
    
    @PutMapping("/{orderId}/status")
    public ResponseEntity<?> updateOrderStatus(@PathVariable Long orderId, 
                                             @RequestParam String status) {
        try {
            System.out.println("üîÑ Updating order status: " + orderId + " -> " + status);
            Order order = orderService.updateOrderStatus(orderId, status);
            return ResponseEntity.ok(order);
        } catch (Exception e) {
            System.err.println("‚ùå Error updating order status: " + e.getMessage());
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }
    
    @GetMapping("/{orderId}")
    public ResponseEntity<OrderDTO> getOrder(@PathVariable Long orderId) {
        System.out.println("üîç Fetching order: " + orderId);
        OrderDTO order = orderService.getOrderById(orderId);
        return ResponseEntity.ok(order);
    }
    
    // Health check endpoint
    @GetMapping("/health")
    public ResponseEntity<String> healthCheck() {
        return ResponseEntity.ok("‚úÖ Order service is running properly");
    }
}